import logging
from aiogram import Bot, types, executor
from aiogram.dispatcher import Dispatcher
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, ParseMode, ReplyKeyboardRemove, InputMediaPhoto
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from DataPostgre import dbworker
import KeyboardButton as kb
import config
from state import AddApartment, SearchApartment

BOT_TOKEN = config.BOT_TOKEN

logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(bot, storage=MemoryStorage())

db = dbworker(host=config.host, user=config.user, password=config.password, db_name=config.db_name)

async def show_apartment(msg: types.Message, index: int, state: FSMContext):
    apartments = db.get_all_apartments()
    if not apartments:
        await msg.answer('–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä.')
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –∏–Ω–¥–µ–∫—Å –±—ã–ª –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Å–ø–∏—Å–∫–∞
    if index < 0:
        index = len(apartments) - 1
    elif index >= len(apartments):
        index = 0

    apartment = apartments[index]
    photos = apartment[8].split(';') if apartment[8] else []
    caption = (
        f"üè† {apartment[3]}\n"
        f"üìç {apartment[2]}\n"
        f"üíµ {apartment[4]} —Ä—É–±.\n"
        f"üìù {apartment[5]}\n"
        f"üõã {apartment[6]}\n"
        f"üìè {apartment[7]} –∫–≤. –º."
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(current_index=index)

    # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏
    inline_kb = InlineKeyboardMarkup(row_width=2)
    inline_kb.add(
        InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data="next"),
        InlineKeyboardButton("–í—ã–π—Ç–∏ ‚ùå", callback_data="exit")
    )

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –∫–∞–∫ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
    if photos:
        media_group = []
        for i, photo in enumerate(photos):
            if i == 0:
                # –ü–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º
                media_group.append(InputMediaPhoto(media=photo, caption=caption))
            else:
                # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
                media_group.append(InputMediaPhoto(media=photo))
        await bot.send_media_group(msg.chat.id, media=media_group)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º inline-–∫–Ω–æ–ø–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        await msg.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:", reply_markup=inline_kb)
    else:
        # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
        await msg.answer(caption, reply_markup=inline_kb)

@dp.message_handler(commands=['start'], state='*')
async def start(msg: types.Message):
    await msg.answer('–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∞—Ä–µ–Ω–¥–Ω—É—é –∫–≤–∞—Ä—Ç–∏—Ä—É –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é.', reply_markup=kb.start())
    if not db.user_exists(msg.from_user.id):
        db.add_user(msg.from_user.username, msg.from_user.id, msg.from_user.full_name)

@dp.message_handler(lambda msg: msg.text == '–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫üè†', state='*')
async def start_search(msg: types.Message, state: FSMContext):
    await state.update_data(current_index=0)  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã
    await show_apartment(msg, 0, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è"
@dp.callback_query_handler(lambda c: c.data == "next", state="*")
async def next_apartment(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    current_index = user_data.get('current_index', 0)
    await callback_query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
    await show_apartment(callback_query.message, current_index + 1, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í—ã–π—Ç–∏ ‚ùå"
@dp.callback_query_handler(lambda c: c.data == "exit", state="*")
async def exit_search(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
    await state.finish()
    await callback_query.message.answer('–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω.', reply_markup=kb.start())

@dp.message_handler(lambda msg: msg.text == '–î–æ–±–∞–≤–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É‚ûï', state='*')
async def add_apartment_start(msg: types.Message):
    await msg.answer('–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:', reply_markup=kb.btn_cancel())
    await AddApartment.city.set()

@dp.message_handler(state=AddApartment.city)
async def add_apartment_city(msg: types.Message, state: FSMContext):
    await state.update_data(city=msg.text)
    await msg.answer('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:')
    await AddApartment.next()

@dp.message_handler(state=AddApartment.address)
async def add_apartment_address(msg: types.Message, state: FSMContext):
    await state.update_data(address=msg.text)
    await msg.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É:')
    await AddApartment.next()

@dp.message_handler(state=AddApartment.price)
async def add_apartment_price(msg: types.Message, state: FSMContext):
    await state.update_data(price=msg.text)
    await msg.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:')
    await AddApartment.next()

@dp.message_handler(state=AddApartment.description)
async def add_apartment_description(msg: types.Message, state: FSMContext):
    await state.update_data(description=msg.text)
    await msg.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∏–¥ –∫–≤–∞—Ä—Ç–∏—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1-–∫–æ–º–Ω–∞—Ç–Ω–∞—è):')
    await AddApartment.next()

@dp.message_handler(state=AddApartment.type)
async def add_apartment_type(msg: types.Message, state: FSMContext):
    await state.update_data(type=msg.text)
    await msg.answer('–í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –∫–≤–∞—Ä—Ç–∏—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 33.5 –∫–≤. –º.):')
    await AddApartment.next()

@dp.message_handler(state=AddApartment.area)
async def add_apartment_area(msg: types.Message, state: FSMContext):
    await state.update_data(area=msg.text)
    await msg.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–≤–∞—Ä—Ç–∏—Ä—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):')
    await AddApartment.next()

@dp.message_handler(state=AddApartment.photos, content_types=types.ContentType.PHOTO)
async def add_apartment_photos(msg: types.Message, state: FSMContext):
    user_data = await state.get_data()
    photos = user_data.get('photos', [])  # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ
    photos.append(msg.photo[-1].file_id)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ
    await state.update_data(photos=photos)
    await msg.answer('–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ì–æ—Ç–æ–≤–æ".', reply_markup=kb.btn_finish_photos())

@dp.message_handler(lambda msg: msg.text == '–ì–æ—Ç–æ–≤–æ‚úÖ', state=AddApartment.photos)
async def finish_adding_photos(msg: types.Message, state: FSMContext):
    user_data = await state.get_data()
    photos = ';'.join(user_data['photos'])  # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ —Å—Ç—Ä–æ–∫—É —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º
    db.add_apartment(
        msg.from_user.id,
        user_data['city'],
        user_data['address'],
        user_data['price'],
        user_data['description'],
        user_data['type'],
        user_data['area'],
        photos
    )
    await msg.answer('–ö–≤–∞—Ä—Ç–∏—Ä–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!', reply_markup=kb.start())
    await state.finish()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)